<?php
class extending
{
    public function installModule($path)
    {
	$pclzip=&$GLOBALS['pclzip'];
	if(file_exists($path))
	{
	    $name=md5(time());
            if(!file_exists("./tmp"))
            {
                if(!@mkdir("./tmp"))
                {
                    return 0;
                }
            }
            $name="./tmp/".md5(time());
            if(@mkdir($name))
            {
                if(($pclzip->extract($name)))
                {
                    if($this->_validateModuleStruct($name))
                    {
                      
                    }
                    if(file_exists($name.'/core'))
                    {
                        if($this->_validateCoreStruct($name.'/core'))
                        {
                            $this->_installCoreLibs($name.'/core');
                        }
                    }
                }
            }
	}
    }
    
    
    private function _validateCoreStruct($name)
    {
        if(!$system->)
    }
    
    
    /**
     * Check module
     *
     */
    private function _validateModuleStruct($name)
    {
        $system=&$GLOBALS['system'];
        $data=simplexml_load_file($system->getPath('libs').'/xml/install_specify.xml');
        for($i=0;$i<count($data->dir);$i++)
        {
            $p=$path.'/'.$data->dir['value'];
            if(@$data->dir[$i]['main'] && !@file_exists($p) && @is_dir($p))) return 0;
            if(@$data->dir[$i]->struct)
            {
               for($j=0;$j<count(@$data->dir[$i]->struct->dir);$j)
               {
                if(@$data->dir[$i]->struct->dir[$i]['main'] && (!@file_exists($data->dir[$i]->struct->dir[$i]['value']) || !@is_dir($data->dir[$i]->struct->dir[$i]['value']))) return 0;
               }
               for($j=0;$j<count(@$data->dir[$i]->struct->file);$j)
               {
                if(@$data->dir[$i]->struct->file[$i]['main'] && (!@file_exists($data->dir[$i]->struct->file[$i]['value']) || !@is_dir($data->dir[$i]->struct->file[$i]['value']))) return 0;
               }
            }
        }
        for($i=0;$i<count($data->file);$i++)
        {
            $p=$path.'/'.$data->file[$i]['path'].'/'.$data->file[$i]['value'];
            if(@$data->file[$i]['main'] && !@file_exists($p)) return 0;
        }
        
        $dat=join('',file($name.'/hash.md5'));
        if(strlen($dat)!=32)
        {
            return false;
        }else{
            $cs=join('',file($name.'/install.xml'));
            $cs.=join('',file($name.'/info.xml'));
            $cs.=join('',file($name.'/license.txt'));
            if(md5($cs)!=$dat) return false;
        }
        
        $info=@simplexml_load_file($name.'/install.xml');
        $info_array=array();
        for($i=0;$i<count($info->sets->set);$i++)
        {
            $info_array[$info->sets->set[$i]['id']]=$info->sets->set[$i]['value'];
        }
        if($this->checkVendorKey(md5($info->module),md5($info_array['vendor']),$cs) return true;
    }
    
    
    public function checkVendorKey($module,$vendor,$key)
    {
        $file=join('',file("http://innoweb.org.ua/modrepository.php?module=".$module."&vendor=".$vendor."&key=".$key));
        if($file=="ok")return true;
        else return false;
    }
    
    private function _installCoreLibs($path)
    {
        
    }
    
    private function _installModule($path)
    {
        
    }
}
?>