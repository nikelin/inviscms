#summary Архитектура движка

= Описание =

В данной статье описываются основные подходы к организации внутренней
архитектуры системы:
0. Подход к структурной реализации движка
1. Базисная единица движка системы - "Пакет"
2. Организация и управление пакетами
3. Подходы к расширяемости и обновлениям


= Подробности =

<h1>Структурная реализация движка</h1>

Основная задача, которая ставилась на движок, во время его разработкм,
заключалась в высоком уровне его гибкости и комфортности для разработчиков
при портировании сторонних решений в систему. 
В этом контексте очень высокий приоритет был отдан спецификации и стандартизации
протоколов взаимодействия пакетов, а так же обеспечению пользоваля функциямя управления
данными пакетами.

Для лучшего понимая функционирования и структурной части движка стоит рассмотреть
дерево каталого, из которых состоит базисный движок:

-/
 -- config.xml            ; Main kernel settings
 -- install.php           ; System installation script
 -- index.php             ; System startpoint
 -- sl.php (PROPOUSED: admin.php)    ; Administration UI
 -- upart.php             ; Client(foreign visitor) UI
 -- dx.php                ; Ajax methods caller 
 -- lib                   ; InvisCMS Engine   
 -- core                  ; System branches
     -- abstractions      ; Packages abstractions
       -- defaultpackage    
         -- def.php     
     -- interfaces        ; Packages interfaces
       -- defaultpackage
         -- def.php
     -- errors            ; Packages errors definitions
       -- defaultpackage
         -- def.php
     -- packages          ; Packages mainclasses
       -- defaultpackage
         -- init.php (+)   ; File with baseclass implementation
         -- config.xml (*) ; Some common configuration, which uses in package context (OPTIONAL)
         -- info.xml (+)   ; Information about package
         -- dependings.xml (+) ; Dependings information
         -- license.xml (*); File with license bode (OPTIONAL)
     -- others (PROPOUSED: `libs`) ; Others librariries (NOT PACKAGES)
       -- init.php         ; "Magic" script what provide linking of all packages
       -- globals.php      ; Some basic helpful functions  
   -- jscore               ; System javascript core
     -- basecore           ; Base javascript core functions
       -- jallib           ; JavascriptActiveLibraries root directory
         -- defaultlib
           -- functions.jal  ; JAL package implementation
     -- thirdpart          ; Thirdpart javascript packages
   -- skins                ; System templates and styles
    -- default             
      -- styles
   -- temp                 ; Directory to save different temprorary informations and files
     -- uploads            ; Uploaded by visitors files
     -- logs               ; System events history
     -- files              ; Files uploaded from administration part
     -- backups            ; Backup of some system data (Example: Article changes hronology, clients base)
   -- modules              ; Modules packages
     -- admin              ; Admin-part modules
       -- defaultmodule
         -- actions        ; Actions for client-side events (what was excepted by POST)
         -- forms          ; 
           -- main.frm(+)     ; Module start-point (this script will be automaticle called, when will requested by system)
           -- config.xml (+)    ; Module common configuration settings
           -- info.xml(+)       ; Information(authority) about this module
           -- license.xml(*)    ; License information
           -- dependings.xml(+) ; Package dependings information
     -- client

Как можно заметить изучив структуру директорий, единица "Пакет" делится на несколько логических частей, которые в совокупности представляют целостный объект "Пакета". 
Во время запроса на подключение пакета к системе, изначально будет обработан файл dependings.xml, который имеет следующую структуру:

<?xml version='1.0' encodings='utf-8'?>
<data>
  <item type='(abstraction|package|errors|interface|lib)' value='{%dependense_identifier%}'/>
  ....
</data>

В случае запроса пакета (параметр `type` в значении `package`) то будет произведена попытка подключить зависимый пакет (если он зарегистрирован в системе), после чего обработка будет передана обратно.
В случае, если обработка зависимостей не была успешно, то данный факт добавляется в историю, а система генерирует соответствующее исключение.

Для лучшей организации пакетов, в системе существует Индекс(репозиторий) пакетов, в котором сохраняется информация о всех доступных на данный момент пакетах.

Репозиторий обновляется в момент загрузки нового пакета, либо обновлении одного из уже зарегистрированных. Структура объекта "Репозитрий" в большей степени наследует с-ва объекта "Пакет", и может быть представлена в следующем виде:

 