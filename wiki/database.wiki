Абстракции для работы с БД

= Описание =

Текущая версия системы использует в качестве движка для работы с БД - средства СУБД *MySQL*, которые поставляются в систему пакетом `*database*`.
Так как предполагается, что система должна использовать большее количество платформы, нежели одну *MySQL*, пакет поставляется вместе с абстракцией, которая может служить для создания дополнительных драйверов, под определённые, необходимые разработчикам системы.

Пакет `database` предоставляет стандартные методы, для извлечения, проверки и внесение изменений в информацию храниму в базе данных:

{{{
  * database::setConnection()                                                             ; Установить соединение с базой  (данные конфигурации)
  * database::_setConnection(host,user,passwd,database)              ; Установить параметреческое соединение
  * database::proceedQuery(query)                                                    ; Задать запрос к текущему соединению
  * database::fetchQuery(query_id)                                                    ; Обработать результаты запроса
  * database::getNumrows(query_id)                                                 ; Получить размерность массива результатов
  * database::getNumcols(query_id)                                                  ; Получить количество полей результата запроса  
  * database::_tableExists(table_name,database=null)                   ; Существует ли таблица в текущей, либо заданной БД
  * database::_fieldExists(field_name,table_name,database=null) ; Существует ли поле в некоторой таблице, текущей либо заданной БД
  * database::proceedForeignKeys()                                                   ; Автоматическая процедура обработки внеших ссылок
  * database::proceedForeignKeys_action()                                       ; Связанная с предыдущей функция
  * database::isError()                                                                         ; Произошла ли во время текущего запроса ошибка
  * database::sqlErrorString()                                                             ; Значение текущей ошибки диалога с БД
  * database::insertRow(table,array)                                                  ; Добавить новую запись к указанной таблице, в массиве идёт перечисление значений, в порядке следования полей
  * database::updateRow(table,updates,where)                               ; Обновить запись в таблице
  * database::deleteRow(table,where)                                               ; Удалить запись из таблицы
  * database::checkRowExists(table,where)                                      ; Проверить существование записи в таблице
}}}

Для авторизации в базе данных, используются данные указываемые в фазе установки системы. После указания данных пользователем, и проверки их корретности, данные сохраняются в конфигурационный файл пакета `database`, при этом шифруются симметричным алгоритмом, по уникальному ключу длиной в 16 символов, который генерируется на стадии установки системы.

Данные сохраняются в формате XML.


== Синхронизация баз данных. Пакет `DBSync` ==

Во время разработки различных проектов, разработчики сталкиваются с такой проблемой, как синхронизация структуры базы данных, с учётом изменений в неё, с каждой последующей версией системы.

Для автоматизации процесса синхронизированная, командой разработчиков начата работа по созданию механизма контроля версий по отношению к структурам БД, основные положения которой представлены в пакете поставляемом вместе с базовым ядром - `*dbsync*`.

Процесс синхронизации состоит из следующих этапов:

1. Выбор *Источника* и *Цели*
2. Назначение правил (Прим.: действия по отношению в таблицам и их содержимому в базе *Цель*, которые были удалены в базе Источник; и т.д.)
3. Формирование инструкций объявления, на основе данных о расхождении в структурах двух БД:
    1. Проверка списока таблиц (имена таблиц, аттрибуты).
    2. Проверка структуры таблиц (список, аттрибуты, позиции, данные).
    3. Создание *SQL*-инструкций, с учётом *п.2*.
4. Создание резервной версии базы *Цель*.
5. Удаление данных из базы *Цель*.
6. Исполнение *SQL*-инструций в контексте базы *Цель*.
7. Вывод результатом обновления, списка обновлений, а так же предложения об откате изменений.

Для создания *SQL*-инструкций, будет произведён анализ двух таблиц на основе положений *п.3* и *п.2*, после чего путём обратного инжениринга созданы инструкции для создания таблиц и добавления в них данных, которые будут соответствовать результатам аналитической обработки.








